
ArgumentenTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b64  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e2  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fb  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050d  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000149  00000000  00000000  00001fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000211a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
 */ 

#include "main.h"

int main(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	00 d0       	rcall	.+0      	; 0xd2 <main+0x6>
  d2:	1f 92       	push	r1
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t waarde = 0;
  d8:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t max = 5;
	uint8_t reset = 3;
	//volatile uint8_t reset = 3;
	
	DDRB=0x50; //0b01010000
  da:	80 e5       	ldi	r24, 0x50	; 80
  dc:	84 b9       	out	0x04, r24	; 4
 *	actie : reg |= waarde
 *
 */
volatile uint8_t initDataDirectionRegister(uint8_t* reg, uint8_t value)
{
	(*reg)|=value;  // *reg = *reg | value
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	8f 60       	ori	r24, 0x0F	; 15
  e2:	84 b9       	out	0x04, r24	; 4
	uint8_t max = 5;
	uint8_t reset = 3;
	//volatile uint8_t reset = 3;
	
	DDRB=0x50; //0b01010000
	volatile uint8_t ddbrstate = initDataDirectionRegister(&DDRB, 0x0F);
  e4:	8a 83       	std	Y+2, r24	; 0x02
 *	outputs : nieuwe toestand van het register
 *	actie : reg |= waarde 
 */
volatile uint8_t updatePortRegister(uint8_t* reg, uint8_t value)
{
	(*reg)|=value;
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	8a 60       	ori	r24, 0x0A	; 10
  ea:	85 b9       	out	0x05, r24	; 5
	uint8_t reset = 3;
	//volatile uint8_t reset = 3;
	
	DDRB=0x50; //0b01010000
	volatile uint8_t ddbrstate = initDataDirectionRegister(&DDRB, 0x0F);
	volatile uint8_t portbstate = updatePortRegister(&PORTB, 0x0A);
  ec:	89 83       	std	Y+1, r24	; 0x01
	
	//De '*' operator is de dereferencing operator
	(*variabele)++;
	if (*variabele >= testwaarde )
	{
		*variabele=resetwaarde;
  ee:	93 e0       	ldi	r25, 0x03	; 3
uint8_t testEnResetVariabele(volatile uint8_t* variabele,uint8_t testwaarde,uint8_t resetwaarde)
{
	uint8_t testresultaat = 0;
	
	//De '*' operator is de dereferencing operator
	(*variabele)++;
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	8b 83       	std	Y+3, r24	; 0x03
	if (*variabele >= testwaarde )
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	85 30       	cpi	r24, 0x05	; 5
  fa:	d0 f3       	brcs	.-12     	; 0xf0 <main+0x24>
	{
		*variabele=resetwaarde;
  fc:	9b 83       	std	Y+3, r25	; 0x03
uint8_t testEnResetVariabele(volatile uint8_t* variabele,uint8_t testwaarde,uint8_t resetwaarde)
{
	uint8_t testresultaat = 0;
	
	//De '*' operator is de dereferencing operator
	(*variabele)++;
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	8b 83       	std	Y+3, r24	; 0x03
	if (*variabele >= testwaarde )
 104:	8b 81       	ldd	r24, Y+3	; 0x03
 106:	85 30       	cpi	r24, 0x05	; 5
 108:	98 f3       	brcs	.-26     	; 0xf0 <main+0x24>
 10a:	f8 cf       	rjmp	.-16     	; 0xfc <main+0x30>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
